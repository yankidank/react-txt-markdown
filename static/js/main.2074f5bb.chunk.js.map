{"version":3,"sources":["Bumbag/BumbagMarkdown.js","FileReader.js","App.js","index.js"],"names":["BumbagMarkdown","props","wrap","children","spacing","content","markdown","FileReader","handleFiles","files","file","fileList","baseSplit","base64","split","fileDecode","decode","newFileAttributes","onChange","handleChange","name","value","multipleFiles","fileTypes","palette","variant","attributes","icon","faFolderOpen","faFolder","welcomeText","theme","text","primary","primaryInverted","secondary","global","fontSize","styles","base","css","Button","variants","defaultProps","opacity","breakpoints","mobile","tablet","Heading","color","fonts","importUrls","default","heading","mono","fontMetrics","capHeight","ascent","descent","lineGap","unitsPerEm","fontWeights","normal","semibold","bold","bolder","fontSizes","extraSmall","lineHeights","letterSpacings","App","useState","fileAttributes","setFileAttributes","React","setValue","editorValue","setEditorValue","localGet","ls","get","localSet","newValue","checkValue","undefined","document","getElementById","set","localRemove","remove","useEffect","className","backgroundColor","padding","margin","minHeight","use","disabled","faFileDownload","onClick","shortName","slice","fileName","prompt","toString","element","createElement","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","fileDownload","faSave","faCheck","faTimes","Column","spread","id","placeholder","e","target","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2074f5bb.chunk.js","sourcesContent":["import React from 'react'\nimport { Stack } from 'bumbag';\nimport { Markdown } from 'bumbag-addon-markdown'\n\nfunction BumbagMarkdown(props) {\n\treturn (\n\t\t<div>\n\t\t\t<Markdown\n\t\t\t\twrap={children => <Stack spacing=\"major-2\">{children}</Stack>}\n\t\t\t\tcontent={props.markdown}\n\t\t\t/> \n\t\t</div>\n\t)\n}\n\nexport default BumbagMarkdown\n\n/* \n<Markdown\n  wrap={children => <Stack spacing=\"major-2\">{children}</Stack>}\n  content={`\nA _friendly_, _themeable_, _accessible_ **React UI Kit** built with [Reakit](https://reakit.io).\n\\n\\n\n> This is a blockquote.\n\\n\\n\n# Heading 1\n## Heading 2\n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n\\n\\n\n**This is bold text**\\n\n_This is italic text_\\n\n_**This is bold italic text**_\\n\n\\n\\n\n- Get\n- Around\n- This\n- List\n\\n\\n\n1. What\n1. About\n1. An\n1. Ordered\n1. One?\n\\n\\n\n| Option | Description |\n| ------ | ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\\n\\n\\n\\n\nIt also supports [links](https://google.com)\n\\n\\n\nAnd images:\\n\n![Bumbag](https://raw.githubusercontent.com/bumbagui/bumbag/master/logo.png)\n`}\n/> */","import React from 'react';\nimport ReactFileReader from 'react-file-reader';\nimport { Button } from 'bumbag';\nimport base64 from 'base-64';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFolder, faFolderOpen} from '@fortawesome/free-solid-svg-icons';\n\nexport const FileReader = (props) => {\n\t\n\tfunction handleChange(newFileAttributes) {\n\t\t// Callback with the new value\n\t\tprops.onChange(newFileAttributes);\n\t}\n\n\tconst handleFileChosen = (files) => {\n\t\tconst file = files.fileList[0];\n\t\tconst baseRaw = files.base64;\n\t\tconst baseSplit = baseRaw.split(',')[1].split('=')[0];\n\t\tconst fileDecode = base64.decode(baseSplit);\n\t\tconst newFileAttributes = {name: file.name, value: fileDecode }\n\t\thandleChange(newFileAttributes)\n\t};\n\n\treturn (\n\t\t<ReactFileReader \n\t\t\thandleFiles={handleFileChosen}\n\t\t\tmultipleFiles={false}\n\t\t\tfileTypes={[\".txt\"]}\n\t\t\tbase64={true}\n\t\t>\n\t\t\t<Button \n\t\t\t\t// variant=\"outlined\" \n\t\t\t\tpalette={'primary'}\n\t\t\t\tvariant={ props.attributes.name ? 'default' : 'outlined'}\n\t\t\t>\n\t\t\t\t{ props.attributes.name ? <FontAwesomeIcon icon={faFolderOpen} /> : <FontAwesomeIcon icon={faFolder} /> }\n\t\t\t\t{props.attributes.name ? props.attributes.name : 'Select File'}\n\t\t\t</Button>\n\t\t</ReactFileReader>\n\t);\n}\n\nexport default FileReader\n","import React, { useState, useEffect } from 'react';\nimport ls from 'local-storage';\n// import parse from 'html-react-parser';\nimport { Provider as BumbagProvider, css } from 'bumbag';\nimport { Columns, Box, Group, Button, Textarea, Clickable } from 'bumbag';\nimport BumbagMarkdown from './Bumbag/BumbagMarkdown';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSave, faFileDownload, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport FileReader from './FileReader';\nimport './App.css';\n\nconst welcomeText = `## Welcome to React .txt Markdown\nUse the textarea on the left half of the screen to input markup-styled text and see it render on the right half in real time.\n#### Features:\n- Import a .txt file into the editor\n- Export content and download it as a .txt file\n- Save content so that you can resume writing later\n- Clear saved content and the textarea\n\nSupported markdown tag examples can be found in the sample.txt file included with this project.`;\n\nconst theme = {\n  palette: {\n    text: '#212121',\n    primary: '#2582d1',\n    primaryInverted: '#fff',\n    secondary: '#ffffff00'\n  },\n  global: {\n    fontSize: 15,\n    styles: {\n      base: css`\n        html,\n        body {\n          background-color: #e8e8e8;\n          color: black;\n        }\n      `\n    }\n  },\n  Button: {\n    variants: {\n      'ghost': {\n        defaultProps: {\n          palette: 'default',\n          opacity: '0.5'\n        }\n      }\n    }\n  },\n  breakpoints: {\n    mobile: 520,\n    tablet: 960\n  },\n  Heading: {\n    styles: {\n      base: {\n        color: 'primary'\n      }\n    }\n  },\n  fonts: {\n    importUrls: [\n      'https://fonts.googleapis.com/css2?family=Roboto:wght@400;700;900&display=swap',\n      'https://fonts.googleapis.com/css2?family=Rubik:wght@700&display=swap'\n    ],\n    default: \"'Roboto', system-ui, sans-serif\",\n    heading: \"'Rubik', sans-serif\",\n    mono: 'Menlo, Courier, monospace',\n  },\n  fontMetrics: {\n    default: {\n      capHeight: 1433,\n      ascent: 1974,\n      descent: -426,\n      lineGap: 0,\n      unitsPerEm: 2000\n    },\n    heading: {\n      capHeight: 743,\n      ascent: 984,\n      descent: -273,\n      lineGap: 0,\n      unitsPerEm: 1000\n    }\n  },\n  fontWeights: {\n    normal: 300,\n    semibold: 400,\n    bold: 500,\n    bolder: 600\n  },\n  fontSizes: {\n    50: 0.5,\n    950: 5,\n    extraSmall: 0.25\n  },\n  lineHeights: {\n    700: 3,\n    extraSmall: 0.8\n  },\n  letterSpacings: {\n    800: '0.2em',\n    extraSmall: '-0.075em'\n  },\n}\n\nexport default function App() {\n\n\tconst [fileAttributes, setFileAttributes] = useState({name:'', value: ''});\n  const [value, setValue] = React.useState(''); // Textarea value\n  const [editorValue, setEditorValue] = React.useState(''); // logic value\n  \n  const localGet = () => {\n    return ls.get('reactTextEditor') || {name:'', value:''};\n  }\n\n  const localSet = (newValue) => {\n    // const {name, value } = newValue;\n    let checkValue = {...newValue, value: ''};\n    if ( newValue === undefined || newValue.value === undefined){\n      checkValue = {...fileAttributes, value: ''};\n    } else if ( newValue.name !== undefined && newValue.value !== undefined ){\n      checkValue = {...newValue};\n    } else {\n      checkValue = {...fileAttributes, value: document.getElementById('editor') ? document.getElementById('editor').value : ''};\n    }\n    ls.set('reactTextEditor', checkValue);\n  }\n\n  const handleChange = (newValue) => {\n    setFileAttributes(newValue);\n    setValue(newValue.value);\n    setEditorValue(newValue.value);\n    if (localGet.value === undefined){ \n      localSet(newValue)\n    } else if (localGet.name !== fileAttributes.name){\n      localSet(newValue)\n    };\n  }\n\n  const handleSave = () => {\n    const checkValue = document.getElementById('editor') ? document.getElementById('editor').value : '';\n    const newValue = {...fileAttributes, value: checkValue};\n    setFileAttributes(newValue);\n    setValue(newValue.value);\n    localSet(newValue);\n  }\n  \n  const localRemove = () => {\n    ls.remove('reactTextEditor');\n    setFileAttributes({name:'', value: ''});\n    setValue('');\n    setEditorValue('');\n  }\n\n  const fileDownload = (newValue) => {\n    // Save to new file\n    const shortName = newValue.name ? newValue.name.slice(0, -4) : null;\n    const fileName = prompt('Name the text file', shortName || 'export').toString() || shortName.toString() || 'export';\n    const element = document.createElement('a');\n    const file = new Blob([document.getElementById('editor').value.toString()], {type: 'text/plain'});\n    element.href = URL.createObjectURL(file);\n    element.download = fileName;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    setFileAttributes({...fileAttributes, name: fileName+'.txt'});\n    element.click();\n  }\n\n  const handleDownload = () => {\n    const newValue = {...fileAttributes, value: value};\n    fileDownload(newValue);\n  }\n\n/*   \n  const handleKeyPress = (event) => {\n    event.stopPropagation();\n    console.log(event);\n  } \n*/\n\n  useEffect(() => {\n    if (localGet() !== null && localGet().value !== ''){\n      setEditorValue(localGet().value);\n      setValue(localGet().value);\n      setFileAttributes(localGet());\n    } else {\n      // setEditorValue(welcomeText);\n      setValue(welcomeText);\n    }\n  }, [])\n\n  return (\n    <div className='App'>\n      <BumbagProvider theme={theme}>\n        <Box backgroundColor='#f5f5f5' padding='1rem' margin='0' minHeight=\"68px\" className=\"header\">\n          <Group>\n            <FileReader onChange={handleChange} attributes={fileAttributes} />\n            {editorValue === '' ? \n              <Clickable \n                use={Button}\n                disabled\n                variant='ghost'\n              >\n                <FontAwesomeIcon icon={faFileDownload} /> \n                Download\n              </Clickable>\n            : \n              <Clickable\n                use={Button}\n                palette=\"primary\"\n                variant=\"outlined\"\n                onClick={handleDownload}\n              >\n                <FontAwesomeIcon icon={faFileDownload} /> \n                Download\n              </Clickable>\n            }\n            { editorValue === '' ?\n              <Clickable use={Button} disabled variant='ghost'><FontAwesomeIcon icon={faSave} />Save</Clickable>\n            : localGet().value === editorValue || fileAttributes.value === editorValue ? \n              <Clickable use={Button} disabled variant='ghost'><FontAwesomeIcon icon={faCheck} />Save</Clickable>\n            : /* fileAttributes.value !== '' && fileAttributes.value !== localGet().value ? */\n              <Clickable\n                use={Button}\n                palette=\"primary\"\n                variant=\"outlined\"\n                onClick={handleSave}\n              >\n                <FontAwesomeIcon icon={faSave} /> \n                Save\n              </Clickable>\n            }\n            {localGet().value !== ''?\n              <Clickable\n                use={Button}\n                palette=\"danger\"\n                onClick={localRemove}\n              >\n                <FontAwesomeIcon icon={faTimes} /> \n                Clear\n              </Clickable>\n            :\n              <Clickable\n                use={Button}\n                variant='ghost'\n                disabled\n                onClick={localRemove}\n              >\n                <FontAwesomeIcon icon={faTimes} /> \n                Clear\n              </Clickable>\n            }\n          </Group>\n        </Box>\n        <Box className=\"content\">\n          <Columns>\n            <Columns.Column spread={6}>\n              <Box padding='0.75rem' className=\"textarea-box\">\n                <Textarea\n                  id='editor'\n                  className=\"editor-textarea\"\n                  value={editorValue}\n                  // onKeyPress={handleKeyPress}\n                  placeholder={welcomeText}\n                  onChange={e => { setValue(e.target.value); setEditorValue(e.target.value) }}\n                />\n              </Box>\n            </Columns.Column>\n            <Columns.Column spread={6}>\n              <Box padding='1rem 0.75rem'>\n                <BumbagMarkdown \n                  onChange={handleChange}\n                  markdown={value} \n                />\n              </Box>\n            </Columns.Column>\n          </Columns>\n        </Box>\n      </BumbagProvider>\n    </div>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}